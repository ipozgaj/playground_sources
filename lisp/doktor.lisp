(defconstant greska nil)
(defconstant prazna-veza '((t . t)))

(defun dodaj-vezu (varijabla vrijednost veze)
  (cons (cons varijabla vrijednost)
		(if (eq veze prazna-veza) nil veze)))

(defun nadji-vezu (varijabla veze)
  (assoc varijabla veze))

(defun nadji-vrijednost (varijabla ulaz veze)
  (let ((veza (nadji-vezu varijabla veze)))
	(cond ((not veza) (dodaj-vezu varijabla ulaz veze))
		  ((equal ulaz (veza-val veza)) veze)
		  (t greska))))

(defun pocinje-sa (list x)
  (and (consp list) (eql (first list) x)))

(defun varijablap (x)
  (and (symbolp x)
	   (equal (elt (symbol-name x) 0) #\?)))

(defun raspoznavanje (uzorak ulaz &optional (veze prazna-veza))
  (cond ((eq veze greska) greska)
        ((varijablap uzorak)
         (nadji-vrijednost uzorak ulaz veze))
        ((eql uzorak ulaz) veze)
        ((segmentp uzorak)
         (raspoznavanje-segmenta uzorak ulaz veze))
        ((and (consp uzorak) (consp ulaz)) 
         (raspoznavanje (rest uzorak) (rest ulaz)
                    (raspoznavanje (first uzorak) (first ulaz) veze)))
        (t greska)))

(defun segmentp (uzorak)
  (and (consp uzorak)
       (pocinje-sa (first uzorak) '?*)))

(defun raspoznavanje-segmenta (uzorak ulaz veze &optional (start 0))
  (let ((varijabla (second (first uzorak)))
		(zamjena (rest uzorak)))
	(if (null zamjena)
	  (nadji-vrijednost varijabla ulaz veze)
        (let ((pos (position (first zamjena) ulaz :start start :test #'equal)))
          (if (null pos)
              greska
              (let ((b2 (raspoznavanje zamjena (subseq ulaz pos) veze)))
                (if (eq b2 greska)
                    (raspoznavanje-segmenta uzorak ulaz veze (+ pos 1))
                    (nadji-vrijednost varijabla (subseq ulaz 0 pos) b2))))))))

(defun raspoznavanje-segmenta (pattern ulaz veze &optional (start 0))
  (let ((varijable (second (first pattern)))
        (pat (rest pattern)))
    (if (null pat)
        (nadji-vrijednost varijable ulaz veze)
        (let ((pos (position (first pat) ulaz
                             :start start :test #'equal)))
          (if (null pos)
              greska
              (let ((b2 (raspoznavanje
                          pat (subseq ulaz pos)
                          (nadji-vrijednost varijable (subseq ulaz 0 pos)
                                          veze))))
                (if (eq b2 greska)
                    (raspoznavanje-segmenta pattern ulaz veze (+ pos 1))
                    b2)))))))


(defun pravilo-uzorak (rule) (first rule))
(defun pravilo-akcija (rule) (rest rule))

(defparameter *pravila*
 '(
   (((?* ?x) bok (?* ?y))      
    (Pozdrav. Kako mogu pomoæi?)
	(Dobar dan. Kako mogu pomoæi?)
	(Pozdrav. Stojim na usluzi.))
   (((?* ?x) pozdrav (?* ?y))      
    (Pozdrav. Kako mogu pomoæi?)
	(Dobar dan. Kako mogu pomoæi?)
	(Pozdrav. Stojim na usluzi.))
   (((?* ?x) dobar dan (?* ?y))      
    (Pozdrav. Kako mogu pomoæi?)
	(Dobar dan. Kako mogu pomoæi?)
	(Pozdrav. Stojim na usluzi.))
   
   (((?* ?x) spavati (?* ?y))
	(Da li ima¹ problema sa snom zbog svojih problema?)
	(Da li te muæi nesanica zbog tvojih problema?)
	(Tako znaèi. Reci mi vi¹e o svojim problemima sa snom.))
   (((?* ?x) zaspati (?* ?y))
	(Da li ima¹ problema sa snom zbog svojih problema?)
	(Da li te muæi nesanica zbog tvojih problema?)
	(Tako znaèi. Reci mi vi¹e o svojim problemima sa snom.))
   (((?* ?x) snom (?* ?y))
	(Da li ima¹ problema sa snom zbog svojih problema?)
	(Da li te muæi nesanica zbog tvojih problema?)
	(Tako znaèi. Reci mi vi¹e o svojim problemima sa snom.))

   (((?* ?x) problem (?* ?y))
	(Da li te taj problem èini nesretnim?)
	(Reci mi ne¹to vi¹e o tom problemu.))
   (((?* ?x) problemi (?* ?y))
	(Da li te ti problemi èine nesretnim?)
	(Reci mi ne¹to vi¹e o tim problemima.))

   (((?* ?x) ¾elim (?* ?y))     
    (©to bi ti znaèilo da ima¹ ?y)
    (Za¹to ¾eli¹ ?y)
	(Pretpostavimo da uskoro dobije¹ ?y. Bi li se tada bolje osjeæao?))
   (((?* ?x) hoæu (?* ?y))     
    (©to bi ti znaèilo da ima¹ ?y)
    (Za¹to ¾eli¹ ?y)
	(Pretpostavimo da uskoro dobije¹ ?y. Bi li se tada bolje osjeæao?))
   (((?* ?x) htio bih (?* ?y))     
    (©to bi ti znaèilo da ima¹ ?y)
    (Za¹to ¾eli¹ ?y)
	(Pretpostavimo da uskoro dobije¹ ?y. Bi li se tada bolje osjeæao?))

   (((?* ?x) ako (?* ?y)) 
    (Da li zaista misli¹ da je moguæe da ?y) 
	(Da li ¾eli¹ da ?y)
    (©to misli¹ o ?y))
   (((?* ?x) ne (?* ?y))
    (Za¹to ne?) (Nisi li malo prenegativan?)
    (Da li ka¾e¹ "NE" samo zato da ispadne¹ negativan?))
   (((?* ?x) bio sam (?* ?y))       
    (Zbilja?)
	(Za¹to misli¹ da si bio ?y)
    (Da li si ?y i sada?))
   (((?* ?x) osjeæam (?* ?y))     
    (Da li èesto osjeæa¹ ?y ?)
	(Da li te taj osjeæaj èini nervoznim?))
   (((?* ?x) osjeæao (?* ?y))     
    (©to drugo trenutno osjeæa¹?)
	(Da li se i sada tako osjeæa¹?))

   (((?* ?x) novci (?* ?y))
	(Da li ti novac predstavlja problem)
	(Èini li te novac sretnim u ¾ivotu)
	(Èini li te novac nesretnim u ¾ivotu)
	(Da li novac igra veliku ulogu u tvom ¾ivotu)
	(Novac nije najva¾niji u ¾ivotu. Da li te neke druge stvari èine sretnim?)
	(Da li bi bio sretniji kad bi imao vi¹e novaca?))
   (((?* ?x) novac (?* ?y))
	(Da li ti novac predstavlja problem)
	(Èini li te novac sretnim u ¾ivotu)
	(Èini li te novac nesretnim u ¾ivotu)
	(Da li novac igra veliku ulogu u tvom ¾ivotu)
	(Novac nije najva¾niji u ¾ivotu. Da li te neke druge stvari èine sretnim?)
	(Da li bi bio sretniji kad bi imao vi¹e novaca?))
   (((?* ?x) novce (?* ?y))
	(Da li ti novac predstavlja problem)
	(Èini li te novac sretnim u ¾ivotu)
	(Èini li te novac nesretnim u ¾ivotu)
	(Da li novac igra veliku ulogu u tvom ¾ivotu)
	(Novac nije najva¾niji u ¾ivotu. Da li te neke druge stvari èine sretnim?)
	(Da li bi bio sretniji kad bi imao vi¹e novaca?))

   (((?* ?x) raèunalo (?* ?y))
	(Da li si nervozan zbog raèunala?)
	(Da li te raèunala èine nervoznim?)
	(Da li te raèunala zabrinjavaju?)
	(Kakve veze raèunala imaju s tvojim problemima?))
   (((?* ?x) raèunala (?* ?y))
	(Da li si nervozan zbog raèunala?)
	(Da li te raèunala èine nervoznim?)
	(Da li te raèunala zabrinjavaju?)
	(Kakve veze raèunala imaju s tvojim problemima?))
   (((?* ?x) kompjuter (?* ?y))
	(Da li si nervozan zbog raèunala?)
	(Da li te raèunala èine nervoznim?)
	(Da li te raèunala zabrinjavaju?)
	(Kakve veze raèunala imaju s tvojim problemima?))
   (((?* ?x) kompjuteri (?* ?y))
	(Da li si nervozan zbog raèunala?)
	(Da li te raèunala èine nervoznim?)
	(Da li te raèunala zabrinjavaju?)
	(Kakve veze raèunala imaju s tvojim problemima?))
   ))

;;; ==============================

(defun doktor ()
  (loop
    (print 'doktor>)
    (write (izravnaj-listu (transformiraj-ulaz (read))) :pretty t)))

(defun transformiraj-ulaz (ulaz)
  (some #'(lambda (pravilo)
            (let ((rezultat (raspoznavanje (pravilo-uzorak pravilo) ulaz)))
              (if (not (eq rezultat greska))
                  (sublis (sredi-zamjenice rezultat)
                          (slucajni-element (pravilo-akcija pravilo))))))
        *pravila*))

(defun sredi-zamjenice (lista)
  (sublis '((ja . ti) (ti . ja) (mene . tebe) (tebe . mene) (sam . si) (si . sam)) 
		  lista))

(defun izravnaj-listu (lista)
  (cond
	((null lista) nil)
	((atom lista) (list lista))
	(t (append (izravnaj-listu (car lista))
			   (izravnaj-listu (cdr lista))))))

(defun slucajni-element (lista)
  (elt lista (random (length lista))))

(doktor)
